---
name: image_building
kind: pipeline
type: docker


steps:
# nginx
  - name: build nginx:${DRONE_BRANCH//\//-}
    image: plugins/docker
    depends_on:
      - clone
    privileged: true
    settings:
      repo: registry.nextpertise.tools/nextpertise/michaelnginx
      registry: registry.nextpertise.tools
      dockerfile: build/web/Dockerfile
      pull_image: true
      build_args:
        - tag=${DRONE_BRANCH//\//-}
      username:
        from_secret: platform_harbor_username
      password:
        from_secret: platform_harbor_password
      tags:
        - ${DRONE_BRANCH//\//-}

#php
  - name: build php:${DRONE_BRANCH//\//-}
    image: plugins/docker
    depends_on:
      - clone
    privileged: true
    settings:
      repo: registry.nextpertise.tools/nextpertise/michaelphp
      registry: registry.nextpertise.tools
      dockerfile: build/php/Dockerfile
      pull_image: true
      build_args:
        - tag=${DRONE_BRANCH//\//-}
      username:
        from_secret: platform_harbor_username
      password:
        from_secret: platform_harbor_password
      tags:
        - ${DRONE_BRANCH//\//-}

trigger:
      target:
        exclude:
        - production

image_pull_secrets:
  - platform_harbor_pull_secrets

---
name: deploy
kind: pipeline

steps:

# Test
  - name: Set test environment
    image: objectiflibre/jinja-init
    user: 0
    environment:
      JINJA_SRC_FILE: 'kubetemplate.j2'
      JINJA_DEST_FILE: '/config/test_kubefile.yaml'
      JINJA_VAR_branchtag: ${DRONE_BRANCH//\//-}
      JINJA_VAR_commithash: ${DRONE_COMMIT_SHA:0:8}
      JINJA_VAR_harborsecret: 
        from_secret: rke_harbor_token
      JINJA_VAR_rkecluster: rke-test.nextpertise.nl
    volumes:
    - name: configs
      path: /config
    commands:
    - python /run.py
    - cat /config/test_kubefile.yaml
    when:
       target:
         exclude:
         - production

  - name: deploy to test
    image: sinlead/drone-kubectl
    depends_on:
      - Set test environment
    volumes:
    - name: configs
      path: /config
    settings:
      kubernetes_server:
        from_secret: rke_test_server
      kubernetes_cert:
        from_secret: rke_test_cert
      kubernetes_token:
        from_secret: rke_test_token
    commands:
      - env
      - kubectl --insecure-skip-tls-verify=true apply -f /config/test_kubefile.yaml
    when:
       target:
         exclude:
         - production

# Prod
  - name: Fail when not master
    image: alpine
    commands:
    - echo hello
    - exit 1 # force failure
    when:
        event:
        - promote
        target:
        - production
        branch:
          exclude:
          - main
          - master
  - name: Set prod environment
    image: objectiflibre/jinja-init
    user: 0
    environment:
      JINJA_SRC_FILE: 'kubetemplate.j2'
      JINJA_DEST_FILE: '/config/prod_kubefile.yaml'
      JINJA_VAR_branchtag: ${DRONE_BRANCH//\//-}
      JINJA_VAR_commithash: ${DRONE_COMMIT_SHA:0:8}
      JINJA_VAR_harborsecret: 
        from_secret: rke_harbor_token
      JINJA_VAR_rkecluster: rke-prod.nextpertise.nl
    volumes:
    - name: configs
      path: /config
    commands:
    - python /run.py
    - cat /config/prod_kubefile.yaml
    when:
        event:
        - promote
        target:
        - production
        branch:
        - main
        - master

  - name: deploy to prod
    image: sinlead/drone-kubectl
    depends_on:
      - Set prod environment
    volumes:
    - name: configs
      path: /config
    settings:
      kubernetes_server:
        from_secret: rke_prod_server
      kubernetes_cert:
        from_secret: rke_prod_cert
      kubernetes_token:
        from_secret: rke_prod_token
    commands:
      - env
      - kubectl --insecure-skip-tls-verify=true apply -f /config/prod_kubefile.yaml
    when:
        event:
        - promote
        target:
        - production
        branch:
        - main
        - master

depends_on:
- image_building

volumes:
- name: configs
  temp: {}
