apiVersion: v1
items:
# Namespace
- apiVersion: v1
  kind: Namespace
  metadata:
    creationTimestamp: null
    name: test1
  spec: {}
  status: {}

## Deployments

# Nginx deployment
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    creationTimestamp: null
    labels:
      app: test1-nginx
    name: nginx
    namespace: test1
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: test1-nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: test1-nginx
      spec:
        containers:
        - image: registry.nextpertise.tools/nextpertise/michaelnginx:test1
          name: nginx
          resources: {}
        imagePullSecrets:
        - name: harbor
        restartPolicy: Always
  status: {}

# PHP Deplyment
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    creationTimestamp: null
    labels:
      app: test1-php
    name: php
    namespace: test1
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: test1-php
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: test1-php
      spec:
        containers:
        - image: registry.nextpertise.tools/nextpertise/michaelphp:test1
          name: php
          resources: {}
        imagePullSecrets:
        - name: harbor
        restartPolicy: Always
  status: {}

## Services

# PHP ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: test1-php
    name: php
    namespace: test1
  spec:
    ports:
    - port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      app: test1-php
    type: ClusterIP
  status:
    loadBalancer: {}

# Web Nodeport
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: test1-nginx
    name: web
    namespace: test1
  spec:
    ports:
    - port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app: test1-nginx
    type: NodePort
  status:
    loadBalancer: {}

## Ingresses

# Web Ingress
- apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: test1-nginx-ingress
    namespace: test1
  spec:
    ingressClassName: nginx
    rules:
    - host: test1
      http:
        paths:
        - backend:
            service:
              name: web
              port:
                number: 80
          path: /
          pathType: Prefix

kind: List